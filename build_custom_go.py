#-------------------------------------------------------------------------------
# Name:        ??1
# Purpose:
#
# Author:      user
#
# Created:     29/01/2014
# Copyright:   (c) user 2014
# Licence:     <your licence>
#-------------------------------------------------------------------------------

from optparse import OptionParser
from Table import Table
import time

usage="""

    build_custom_go.py: build the custom Go annotation
    Usage: build_custom_go.py [-h] -c gene_class -g go_anno -o out_file

"""
parser = OptionParser(usage=usage)
parser.add_option("-c", "--class", dest="gene_class", help="(Required.) The path of gene classification file. "
                  + "This classification file could be generated by compare.py, which is named as 'compare_1_infor.txt'"
                  + "under compare.py output directory. It should have three cloumns: input_gene_id, class and ref_gene_info.")
parser.add_option("-g", "--go_anno", dest="go_anno", help="(Required.) The path of all gene annotation file. "
                  +"The annotation file should have two columns: 1,gene_symbol; 2, go_id . "
                  +"The second column should contain the terms in the third column of gene_class file(-c file). ")
parser.add_option("-o", "--out", dest="out_file", help="output file. The output file has two columns, 'gene_id_update' and 'go_id' "
                  +"Genes with class=='known_coding' were renamed to the ref_gene_info. ")
(options, args) = parser.parse_args()

if options.gene_class is not None:
    gene_class=options.gene_class
else:
    print parser.print_help()
    exit("Error: gene_class file is required!")
if options.go_anno is not None:
    go_anno=options.go_anno
else:
    print parser.print_help()
    exit("Error: go annotation file is required!")
if options.out_file is not None:
    out_file=options.out_file
else:
    print parser.print_help()
    exit("Error: output file is required!")

start_time=time.time()
print "Build the custom go annotation:"

gene_class=Table(gene_class,0,True)
go_anno=Table(go_anno,0,True)

gene_class=gene_class.eget('union','2=known_coding')
gene_class=gene_class.get_col(1,3)
gene_class=gene_class.disabond_col(2,',')
out=Table.fuzzy_paste(gene_class,2,go_anno,1)
def f(row):
    if row[1]=="":
        return row[0]
    else:
        return row[1]
out.append_col_by_func('gene_id_update',f)
out=out.get_col('gene_id_update','go_id')
out=out.eget('union','2!=')
out=out.disabond_col(1,',')
out=out.disabond_col(2,',')
out=out.de_redundency()
out.write_to_file(out_file)


run_time=int(time.time() - start_time)
exit("Building custom GO annotation complete: "+"%d seconds elapsed " % run_time )




