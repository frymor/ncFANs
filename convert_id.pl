#!/usr/bin/perl

=head1 NAME

convert_id.pl - Convert coding gene id to gene symbol.

=head1 SYNOPSIS

Use:

    perl convert_id.pl  [options] -m <mapping.txt> -e <edge.txt> -o output.txt

Examples:

    perl convert_id.pl --help

    perl convert_id.pl -m mapping.txt -e edge.txt -o output.txt


=head1 DESCRIPTION

This script is part of the ncFANs pipeline. The script can convert coding
gene id to gene symbol for module-based or hub-based edge file.

=head1 ARGUMENTS

convert_id.pl takes the following arguments:

=over 4

=item mapping file

  -m <mapping.txt>
 
(Required.) The path of mapping file. Note that the mapping file was generated
by compare.py in CNCI pipe.

=item edge file
  
  -e <edge.txt>

(Required.) The path of edge file generated by function_predict.pl.

=item output

  -o

(Required.) The path of output file.

=item hub-based edge

  -h

(Optional.) The edge file was generated by hub-based method. If not selected,
module-based method.  

=item help

  --help

(Optional.) Displays the usage message.

=back

=head1 AUTHOR

Li Ming, E<lt>liming@bioinfo.ac.cnE<gt>.

=head1 COPYRIGHT

This program is distributed under the Artistic License.

=head1 DATE

28-Feb-2014

=cut

use strict;
use warnings;
use Getopt::Long;    #   Resist name-space pollution!
use Pod::Usage;      #   Ditto!

#   Check arguments.

my ($mapping, $edge, $output, $hub, $help);
    
GetOptions(
    'm=s'       => \$mapping,
    'e=s'       => \$edge,
    'o=s'       => \$output,
    'h'         => \$hub,
    'help'      => \$help);

#   Check for requests for help or for man (full documentation):

pod2usage(-verbose => 1) if ($help);

#   Check for required variables.

unless (defined($mapping) && defined($edge) && defined($output))
{
    pod2usage(-exitstatus => 2);
}

my %map;
open FH, $mapping or die "Can't open $mapping\n";
print "Reading mapping file ...\n";
my $head = <FH>;
while (<FH>) {
    chomp;
    my @tmp = split /\t/, $_;
    $map{$tmp[0]} = $tmp[2] if (exists($tmp[1]) && $tmp[1] eq 'known_coding');
    
} 
close FH;
#print scalar keys %map, "\n";

open FH, $edge or die "Can't open $edge\n";
open OUT, ">$output" or die "Can't open $output\n";
print "Converting ids ...\n";
while (<FH>) {
    chomp $_;
    my @tmp = split /\t/, $_;
    my ($name1, $name2) = @tmp[0..1];
    if (defined($hub)) {
        if (exists($map{$tmp[1]})) {
            $name2 = $map{$tmp[1]};
            @tmp = ($tmp[0], $name2);
        } 
    } else {
        if (exists($map{$tmp[0]})) {
            $name1 = $map{$tmp[0]};
        } 
        if (exists($map{$tmp[1]})) {
            $name2 = $map{$tmp[1]};
        } 
        @tmp = ($name1, $name2);
    }
    print OUT join("\t", @tmp), "\n";
}
print "Done!\n";
close FH;
close OUT;
